version: '3.9'

services:
    postgres:
      image: postgres:13
      container_name: billing_postgres
      restart: always
      volumes:
        - pg_billing_volume:/var/lib/postgresql/data/
        - ./database/dump:/docker-entrypoint-initdb.d
      env_file:
        - .env
      environment:
        - POSTGRES_USER=${DB_USER}
        - POSTGRES_PASSWORD=${DB_PASSWORD}
        - POSTGRES_DB=${DB_NAME}
      healthcheck:
        test: [ "CMD-SHELL", "pg_isready -U app -d ${DB_NAME}" ]
        interval: 10s
        timeout: 5s
        retries: 5

    redis:
      image: redis:7.0.11-alpine
      volumes:
        - redis_billing_volume:/data
      healthcheck:
        test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
        interval: 1s
        timeout: 3s
        retries: 5

    backend:
      build:
        context: .
        dockerfile: ./backend/Dockerfile
      image: backend-billing-image
      env_file:
        - ./backend/.env
      healthcheck:
        test: [ "CMD", "curl", "--fail", "http://localhost:8000/api/openapi" ]
        interval: 15s
        timeout: 5s
        retries: 5
      expose:
        - 8000
      depends_on:
        redis:
          condition: service_healthy
        postgres:
          condition: service_healthy

    admin:
      build:
        context: ./admin
      env_file:
        - ./admin/.env
      volumes:
        - ./database:/app/database
      healthcheck:
        test: ["CMD", "curl", "--fail", "http://localhost:8000/admin/"]
        interval: 15s
        timeout: 5s
        retries: 5
      expose:
        - 8000
      depends_on:
        postgres:
          condition: service_healthy

volumes:
    pg_billing_volume:
      name: pg_billing_volume
    redis_billing_volume:
      name: redis_billing_volume